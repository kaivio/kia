#!/bin/python
import os
import subprocess
import difflib
import math
from pathlib import Path
from tempfile import mktemp
from datetime import datetime
import click


def kia_dir(*rel_paths):
    p = Path(Path.home(),'kia-project',*rel_paths)
    p.parent.mkdir(exist_ok=True,parents=True)
    return p


@click.command()
@click.argument('file',default='')
@click.option('-l','--list', flag_value='.',is_flag=False)
@click.option('-s','--store')
@click.option('-r','--restore')
@click.option('--sync', is_flag=True)
def kia(file:str,**opts):
    if opts['list']:
        print('TODO ...',opts['list'])
        return

    if opts['store']:
        p1 = opts['store']
        file = file or p1
        p2 = kia_dir('file',file)
        cp_r(p1, p2)

        return

    if opts['restore']:
        p1 = kia_dir('file',opts['restore'])
        p2 = file or opts['restore']
        cp_r(p1, p2)

        return


    if opts['sync']:
        git('pull')
        git('add','.')
        git('commit','-m','sync')
        git('push')

        return

    file = file or 'kia.md'
    t = datetime.now().ctime()
    if file.startswith('kia'):
        tf = mktemp(suffix='.md')
        put(tf, f'-----------------------\n*{t}*\n\n_\n\n')

        mtime = os.stat(tf).st_mtime
        click.edit(filename=tf)
        if os.stat(tf).st_mtime > mtime:
            content = cat(tf)
            p = kia_dir(file)
            with open(p,'a') as f:
                f.write(content)
                print('saved')
        else:
            print('unsave!')
        os.remove(tf)
    else:
        click.edit(filename=kia_dir(file))

def git(*args):
    subprocess.run(['git','-C',str(kia_dir()),*args])


def put(file, data):
    p = Path(file)
    Path(p.parent).mkdir(parents=True,exist_ok=True)
    try:
        f = open(p,'w')
        f.write(data)
        f.close()
    except Exception as e:
        return e

def cat(file):
    try:
        f = open(file)
        data = f.read()
        f.close()
        return data
    except:
        return ''

def cp_r(p1, p2):
    p1, p2 = Path(p1), Path(p2)
    if p1.is_dir():
        for f in os.listdir(p1):
            cp_r(Path(p1,f),Path(p2,f))
    elif p1.is_file():
        f1 = cat(p1)
        f2 = cat(p2)
        diff = difflib.ndiff(f2.splitlines(keepends=True),f1.splitlines(keepends=True))
        diff_count = {'+':0,'-':0,'?':0,' ':0, '#':0}
        for line in diff:
            diff_count['#'] += 1
            diff_count[line[0]] += 1

        term_size = os.get_terminal_size()
        n = term_size[0] - 4
        diff_label = {}
        for k,v in diff_count.items():
            r = v / diff_count['#']
            diff_label[k] = k * math.ceil(n*r)

        put(p2,f1)


        print(p1,'\033[35mâžœ\033[0m',p2)
        print(f"    \033[32m{diff_label['+']}\033[31m{diff_label['-']}\033[0m")

        err = 0#put(p2,f1)
        if err:
            print(err)
    else:
        print(p1, 'not is file or dir')


def main():
    kia()

if __name__ == "__main__":
    main()
